#' Parallel Peak Binning for MSI Datasets
#'
#' Converts profile spectra to centroided data based on a peak list generated by MSI.detectpeaks().
#' Runs in parallel using 50% of available cores if run on WSL2 or Linux, and splits binning into batches
#' of 3 samples or less to conserve resources. For use with older versions of Cardinal (< 3.6.3).
#'
#' @param samp.list A list of Cardinal MSImagingExperiment sample information created from MSI.LoadAll().
#' @param data.list A list of Cardinal MSImagingExperiment objects created from MSI.LoadAll().
#' @param pk.list A list containing a data frame of processed peaks and processing details created by MSI.detectpeaks().
#' @param parl Should processing be run in parallel? Note: only supported by WSL2 or Linux; will default to sequential processing if toggled 'TRUE' on Windows OS.
#' @return A list containing a data frame of processed peaks and processing details.
#' @examples
#' MSI.binpeaks(list.d[["Sample.Info"]],list.d[["Data.files"]],d.peaks,TRUE)
#'
#' @export
MSI.binpeaks <- function(
  samp.list,
  data.list,
  pk.list,
  parl
  ){

  d.peaks <- pk.list
  list.s <- samp.list
  list.d <- data.list

  gc(reset = T)

  # Parallelization parameters
  if(Sys.info()[["sysname"]] != "Windows" &
     parl == TRUE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::MulticoreParam(
        workers = floor(
          parallel::detectCores()/6
        ),
        progressbar = T
      )
    )
  }
  if(Sys.info()[["sysname"]] == "Windows" &
     parl == TRUE) {
    Cardinal::setCardinalBPPARAM(
    BiocParallel::SnowParam(
      workers = floor(
        parallel::detectCores()/6
        ),
      progressbar = T
      )
    )
    print("Warning: Parallel processing in Windows may be unstable; Switch parallel processing to FALSE upon a processing error.")
  }
  if(Sys.info()[["sysname"]] != "Windows" &
     parl == FALSE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::SerialParam()
    )
  }
  if(Sys.info()[["sysname"]] == "Windows" &
     parl == FALSE) {
    Cardinal::setCardinalBPPARAM(
      BiocParallel::SerialParam()
    )
  }

  # # Processing parameters
  # ifelse(
  #   sum(
  #     unlist(
  #       lapply(
  #         list.d,
  #         function(x) nrow(
  #           Cardinal::coord(x)
  #         )
  #       )
  #     )
  #   )/
  #     100 <
  #     2000,
  #   n.chunk <- 100,
  #   ifelse(
  #     sum(
  #       unlist(
  #         lapply(
  #           list.d,
  #           function(x)
  #             nrow(
  #               Cardinal::coord(x)
  #             )
  #         )
  #       )
  #     )/
  #       1000 <
  #       2000,
  #     n.chunk <- 1000,
  #     n.chunk <- 10000
  #   )
  # )
  #
  # Cardinal::setCardinalNChunks(
  #   n = n.chunk
  # )





  ### Binning ###
  #### Divide into batches of 3 samples then concatenate to conserve memory
  n.batch <- ceiling(
    length(
      list.s[["ID"]]
    )/3
  )
  #### 4 batches
  if(
    n.batch == 4
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
          ),
        "samples present: dividing binning into 4 batches...",
        sep = " "
        )
      )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,3,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[[x]],
                ref = Cardinal::mz(
                  d.peaks
                  ),
                type = "height",
                tolerance = 5,
                units = "ppm"
                )
              )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[[x]],
                ref = Cardinal::mz(
                  d.peaks
                ),
                type = "height"
              )
            )
          }

          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:3]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

    # Batch 2
    d.proc2 <- setNames(
      lapply(
        seq.int(
          4,6,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][4:6]
      )
    )
    ## output stats
    proc.time()
    d.proc2
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc2,
      file = "2.2.processed.b2.rds"
    )
    # Reset memory
    remove(d.proc2)
    gc(reset = T)

    # Batch 3
    d.proc3 <- setNames(
      lapply(
        seq.int(
          7,9,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][7:9]
      )
    )
    ## output stats
    proc.time()
    d.proc3
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc3,
      file = "2.2.processed.b3.rds"
    )
    # Reset memory
    remove(d.proc3)
    gc(reset = T)

    # Batch 4
    d.proc4 <- setNames(
      lapply(
        seq.int(
          10,
          length(
            list.s[["ID"]]
          ),
          1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][10:
                                   length(
                                     list.s[["ID"]]
                                   )
        ]
      )
    )
    ## output stats
    proc.time()
    d.proc4
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc4,
      file = "2.2.processed.b4.rds"
    )
    # Reset memory
    remove(d.proc4)
    gc(reset = T)

  }


  #### 3 batches
  if(
    n.batch == 3
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
        ),
        "samples present: dividing binning into 3 batches...",
        sep = " "
      )
    )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,3,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:3]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

    # Batch 2
    d.proc2 <- setNames(
      lapply(
        seq.int(
          4,6,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][4:6]
      )
    )
    ## output stats
    proc.time()
    d.proc2
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc2,
      file = "2.2.processed.b2.rds"
    )
    # Reset memory
    remove(d.proc2)
    gc(reset = T)

    # Batch 3
    d.proc3 <- setNames(
      lapply(
        seq.int(
          7,9,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][7:9]
      )
    )
    ## output stats
    proc.time()
    d.proc3
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc3,
      file = "2.2.processed.b3.rds"
    )
    # Reset memory
    remove(d.proc3)
    gc(reset = T)

  }


  #### 2 batches
  if(
    n.batch == 2
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
        ),
        "samples present: dividing binning into 2 batches...",
        sep = " "
      )
    )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,3,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:3]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

    # Batch 2
    d.proc2 <- setNames(
      lapply(
        seq.int(
          4,6,1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][4:6]
      )
    )
    ## output stats
    proc.time()
    d.proc2
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc2,
      file = "2.2.processed.b2.rds"
    )
    # Reset memory
    remove(d.proc2)
    gc(reset = T)

  }


  #### 1 batch
  if(
    n.batch == 1
  ){
    print(
      paste(
        length(
          list.s[["ID"]]
        ),
        "samples present: binning will be completed as a single batch file...",
        sep = " "
      )
    )
    # Batch 1
    d.proc1 <- setNames(
      lapply(
        seq.int(
          1,length(
            list.s[["ID"]]
          ),1
        ),
        function(x) {
          # Bin peaks to convert profile to centroid
          if(unlist(packageVersion("Cardinal"))[2] >= 6) {
            d.p <- Cardinal::process(
              Cardinal::peakPick(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height",
                tolerance = 5,
                units = "ppm"
              )
            )
          }

          if(unlist(packageVersion("Cardinal"))[2] < 6) {
            d.p <- Cardinal::process(
              Cardinal::peakBin(
                list.d[["Data.files"]][[x]],
                ref = Cardinal::mz(
                  d.peaks[["Processed.Peaks"]]
                ),
                type = "height"
              )
            )
          }
          # Return processed sample
          return(d.p)

        }
      ),
      c(
        list.s[["Sample.imzML"]][1:length(
          list.s[["ID"]]
        )]
      )
    )
    ## output stats
    proc.time()
    d.proc1
    Cardinal::getCardinalBPPARAM()
    Cardinal::getCardinalNumBlocks()
    saveRDS(
      d.proc1,
      file = "2.2.processed.b1.rds"
    )
    # Reset memory
    remove(d.proc1)
    gc(reset = T)

  }

  print("All samples have been successfully binned! The binned results are included in the .rds batch files...")
  }




