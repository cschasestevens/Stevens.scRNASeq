#### Heatmaps ####

#---- Top DEGs based on DGEA result (subset based on comparison) ----

## Top DEGs for specified comparison and cell types

fun.hm.de.gene1 <- function(
  dgea.result,
  seurat.object,
  list.comparsions,
  MAST.cont,
  MAST.name.string,
  MAST.comp,
  deg.no,
  mt.rem,
  g.var,
  list.celltype,
  size.anno,
  hm.w,
  hm.h,
  size.lab,
  title1
  ) {
  
  # Plot input
  
  ## Return specified number of DEGs for selected comparison and cell types
  
  d <- dplyr::select(
    dplyr::slice_max(
      dplyr::group_by(
        dgea.result[dgea.result[["Comparison"]] %in%
                      list.comparsions[list.comparsions[["MAST.cont"]] == MAST.cont,
                                       "Name"],],
        dplyr::across(
          dplyr::all_of(
            c(
              "Comparison",
              g.var
              )
            )
          )
        ),
      order_by = -.data[["H.pval"]],
      n = deg.no
      ),
    c(
      g.var,
      "Comparison",
      "GENE",
      "H.pval"
      )
    )
  
  
  ## Remove Mitochondrial/Ribosomal genes?
  
  mt.rp.remove <- mt.rem
  
  ifelse(
    mt.rp.remove == TRUE,
    d <- d[!grepl(
      "MT-|RP",
      d[["GENE"]]
    ),],
    d
  )
  
  
  ## Filter individual cell types
  
  d[[g.var]] <- gsub(
    "^.*\\.",
    "",
    as.character(
      d[[g.var]]
      )
    )
  
  d <- d[d[[g.var]] %in%
           list.celltype,
         ]
  
  
  ## Filter DGEA results based on gene list
  
  d2 <- dplyr::select(
    dgea.result[dgea.result[["Comparison"]] %in%
                  d[["Comparison"]] &
                  dgea.result[["GENE"]] %in%
                  unique(
                    d[["GENE"]]
                    ),],
    c(
      g.var,
      "Comparison",
      "GENE",
      "logFC"
      )
    )
  
  d2[["CellGroup"]] <- gsub(
    "^.*\\.",
    "",
    as.character(
      d2[["CellType"]]
      )
    )

  d2 <- d2[d2[["CellGroup"]] %in%
             list.celltype,
           ]
  
  
  ## Format as matrix
  
  d3 <- reshape2::dcast(
    d2[,-c(5)],
    CellType +
      Comparison ~
      GENE,
    value.var = "logFC"
  )
  
  
  d3[3:ncol(
    d3
    )] <- as.data.frame(
      lapply(
        d3[3:ncol(
          d3
          )],
        function(x)
          ifelse(
            is.na(x),
            0,
            x
            )
        )
      )
  
  
  ## Row annotations
  
  h.row.anno <- gsub(
    "^.*\\.",
    "",
    as.character(
      d3[["CellType"]]))
  
  h.row.anno2 <- gsub(
    MAST.name.string,
    "",
    d3[["Comparison"]]
    )
  
  h.row.anno3 <- factor(
    as.numeric(
      gsub(
        "\\..*",
        "",
        as.character(
          d3[["CellType"]]
          )
        )
      ),
    levels = c(
      seq(
        1:max(
          as.numeric(
            gsub(
              "\\..*",
              "",
              as.character(
                d3[["CellType"]]
                )
              )
            )
          )
        )
      )
    )
  
  
  ## Input matrix
  
  d3 <-magrittr::set_rownames(
    as.matrix(
      d3[3:ncol(
        d3
        )]
      ),
    d3[["Comparison"]]
    )
  
  
  
  ### Subset seurat and scale
  
  h <- FetchData(
    seurat.object,
    vars = c(
      "CellType",
      "CellGroup",
      unique(
        d2[["GENE"]]
      )
    )
  )
  
  
  ### Heatmap annotation (average expression)
  
  h.anno <- as.data.frame(
    lapply(
      h[,3:ncol(
        h
      )],
      function(x) 
        mean(x)
    )
  )
  
  
  ## Color scheme
  
  fun.hm.col <- colorRamp2(
    c(
      min(d3),min(d3)/2,
      0,max(d3)/2,
      max(d3)
    ),
    colors = c(
      col2a[[1]],col2a[[3]],
      "white",col2a[[6]],
      col2a[[12]]
      )
    )
  
  
  ## Output plot
  
  h.out <- ComplexHeatmap::Heatmap(
    d3,
    col = fun.hm.col,
    name = "logFC",
    top_annotation = ComplexHeatmap::HeatmapAnnotation(
      `Avg.Exp` = ComplexHeatmap::anno_barplot(
        as.vector(
          t(
            h.anno
          )
        ),
        gp = gpar(
          fill = col1b
        )
      ),
      annotation_name_gp = gpar(
        fontsize = size.anno
      ),
      annotation_name_side = "left"
    ),
    left_annotation = ComplexHeatmap::rowAnnotation(
      "Cluster" = h.row.anno3,
      "CellGroup" = h.row.anno,
      "Group" = h.row.anno2
      ,
      col = list(
        "Cluster" = setNames(
          as.vector(
            col3a[1:length(
              unique(h.row.anno3)
            )]
          ),
          c(
            unique(h.row.anno3)
          )
        ),
        "CellGroup" = setNames(
          as.vector(
            col3a[1:length(
              unique(h.row.anno)
            )]
          ),
          c(
            unique(h.row.anno)
          )
        ),
        "Group" = setNames(
          as.vector(
            col1a[1:length(unique(h.row.anno2))]
          ),
          c(
            unique(
              h.row.anno2
              )
            )
        )
      )
      ,
      show_annotation_name = T,
      annotation_name_gp = gpar(
        fontsize = 10
        )
      ),
    show_column_names = T,
    show_row_names = F,
    heatmap_width = unit(
      hm.w,"cm"
    ),
    heatmap_height = unit(
      hm.h,"cm"
    ),
    column_title = title1,
    column_names_rot = 90,
    column_names_gp = gpar(
      fontsize = size.lab
    ),
    cluster_columns = T,
    cluster_rows = T
  )
  
  
  return(
    list(
      "input" = d3,
      "plot" = h.out
    )
  )
  
  }









## Top DEGs for specified comparison and cell types (when only one comparison is present)

fun.hm.de.gene2 <- function(
    dgea.result,
    seurat.object,
    clus.col,
    deg.no,
    mt.rem,
    size.anno,
    hm.w,
    hm.h,
    size.lab,
    title1
) {
  
  # Plot input
  
  ## Return specified number of DEGs for selected comparison and cell types
  
  d <- dplyr::select(
    dplyr::slice_max(
      dplyr::group_by(
        dgea.result,
        dplyr::across(
          dplyr::all_of(
            c(
              "Comparison",
              "CellType"
            )
          )
        )
      ),
      order_by = -.data[["H.pval"]],
      n = 10
    ),
    c(
      "CellType",
      "Comparison",
      "GENE",
      "H.pval"
    )
  )
  
  
  ## Remove Mitochondrial/Ribosomal genes?
  
  mt.rp.remove <- mt.rem
  
  ifelse(
    mt.rp.remove == TRUE,
    d <- d[!grepl(
      "MT-|RP",
      d[["GENE"]]
    ),],
    d
  )
  
  
  ## Filter DGEA results based on gene list
  
  d2 <- dplyr::select(
    dgea.result[dgea.result[["Comparison"]] %in%
                  d[["Comparison"]] &
                  dgea.result[["GENE"]] %in%
                  unique(
                    d[["GENE"]]
                  ),],
    c(
      "CellType",
      "Comparison",
      "GENE",
      "logFC"
    )
  )
  
  
  ## Format as matrix
  
  d3 <- reshape2::dcast(
    d2[,-c(5)],
    lazyeval::lazy_eval(
    paste(
      "CellType",
      "+ Comparison ~ GENE",
      sep = ""
      )
    ),
    value.var = "logFC"
  )
  
  
  d3[3:ncol(
    d3
  )] <- as.data.frame(
    lapply(
      d3[3:ncol(
        d3
      )],
      function(x)
        ifelse(
          is.na(x),
          0,
          x
        )
    )
  )
  
  
  ## Row annotations
  
  h.row.anno3 <- d3[["CellType"]]
  
  
  ## Input matrix
  
  d3 <-magrittr::set_rownames(
    as.matrix(
      d3[3:ncol(
        d3
      )]
    ),
    d3[["Comparison"]]
  )
  
  
  
  ### Subset seurat and scale
  
  h <- FetchData(
    seurat.object,
    vars = c(
      clus.col,
      unique(
        d2[["GENE"]]
      )
    )
  )
  
  
  ### Heatmap annotation (average expression)
  
  h.anno <- as.data.frame(
    lapply(
      h[,2:ncol(
        h
      )],
      function(x) 
        mean(x)
    )
  )
  
  
  ## Color scheme
  
  fun.hm.col <- colorRamp2(
    c(
      min(d3),min(d3)/2,
      0,max(d3)/2,
      max(d3)
    ),
    colors = c(
      col2a[[1]],col2a[[3]],
      "white",col2a[[6]],
      col2a[[12]]
    )
  )
  
  
  ## Output plot
  
  h.out <- ComplexHeatmap::Heatmap(
    d3,
    col = fun.hm.col,
    name = "logFC",
    top_annotation = ComplexHeatmap::HeatmapAnnotation(
      `Avg.Exp` = ComplexHeatmap::anno_barplot(
        as.vector(
          t(
            h.anno
          )
        ),
        gp = gpar(
          fill = col1b
        )
      ),
      annotation_name_gp = gpar(
        fontsize = size.anno
      ),
      annotation_name_side = "left"
    ),
    left_annotation = ComplexHeatmap::rowAnnotation(
      "Cluster" = h.row.anno3
      ,
      col = list(
        "Cluster" = setNames(
          as.vector(
            col3a[1:length(
              unique(h.row.anno3)
            )]
          ),
          c(
            unique(h.row.anno3)
          )
        )
      )
      ,
      show_annotation_name = T,
      annotation_name_gp = gpar(
        fontsize = 10
      )
    ),
    show_column_names = T,
    show_row_names = F,
    heatmap_width = unit(
      hm.w,"cm"
    ),
    heatmap_height = unit(
      hm.h,"cm"
    ),
    column_title = title1,
    column_names_rot = 90,
    column_names_gp = gpar(
      fontsize = size.lab
    ),
    cluster_columns = T,
    cluster_rows = T
  )
  
  
  return(
    list(
      "input" = d3,
      "plot" = h.out
    )
  )
  
}




## Top DEGs for specified comparison with grouped cell types (when only one comparison is present)

fun.hm.de.gene3 <- function(
    dgea.result,
    seurat.object,
    clus.col,
    deg.no,
    mt.rem,
    size.anno,
    hm.w,
    hm.h,
    size.lab,
    title1
) {
  
  # Plot input
  
  ## Return specified number of DEGs for selected comparison and cell types
  
  d <- dplyr::select(
    dplyr::slice_max(
      dplyr::group_by(
        dgea.result,
        dplyr::across(
          dplyr::all_of(
            c(
              "Comparison"
            )
          )
        )
      ),
      order_by = -.data[["H.pval"]],
      n = 10
    ),
    c(
      "Comparison",
      "GENE",
      "H.pval"
    )
  )
  
  
  ## Remove Mitochondrial/Ribosomal genes?
  
  mt.rp.remove <- mt.rem
  
  ifelse(
    mt.rp.remove == TRUE,
    d <- d[!grepl(
      "MT-|RP",
      d[["GENE"]]
    ),],
    d
  )
  
  
  ## Filter DGEA results based on gene list
  
  d2 <- dplyr::select(
    dgea.result[dgea.result[["Comparison"]] %in%
                  d[["Comparison"]] &
                  dgea.result[["GENE"]] %in%
                  unique(
                    d[["GENE"]]
                  ),],
    c(
      "Comparison",
      "GENE",
      "logFC"
    )
  )
  
  
  ## Format as matrix
  
  d3 <- reshape2::dcast(
    d2[,-c(5)],
    lazyeval::lazy_eval(
      paste(
        "Comparison ~ GENE",
        sep = ""
      )
    ),
    value.var = "logFC"
  )
  
  
  d3[2:ncol(
    d3
  )] <- as.data.frame(
    lapply(
      d3[2:ncol(
        d3
      )],
      function(x)
        ifelse(
          is.na(x),
          0,
          x
        )
    )
  )
  
  
  ## Row annotations
  
  h.row.anno3 <- d3[["Comparison"]]
  
  
  ## Input matrix
  
  d3 <-magrittr::set_rownames(
    as.matrix(
      d3[2:ncol(
        d3
      )]
    ),
    d3[["Comparison"]]
  )
  
  
  
  ### Subset seurat and scale
  
  h <- FetchData(
    seurat.object,
    vars = c(
      clus.col,
      unique(
        d2[["GENE"]]
      )
    )
  )
  
  
  ### Heatmap annotation (average expression)
  
  h.anno <- as.data.frame(
    lapply(
      h[,2:ncol(
        h
      )],
      function(x) 
        mean(x)
    )
  )
  
  
  ## Color scheme
  
  fun.hm.col <- colorRamp2(
    c(
      min(d3),min(d3)/2,
      0,max(d3)/2,
      max(d3)
    ),
    colors = c(
      col2a[[1]],col2a[[3]],
      "white",col2a[[6]],
      col2a[[12]]
    )
  )
  
  
  ## Output plot
  
  h.out <- ComplexHeatmap::Heatmap(
    d3,
    col = fun.hm.col,
    name = "logFC",
    top_annotation = ComplexHeatmap::HeatmapAnnotation(
      `Avg.Exp` = ComplexHeatmap::anno_barplot(
        as.vector(
          t(
            h.anno
          )
        ),
        gp = gpar(
          fill = col1b
        )
      ),
      annotation_name_gp = gpar(
        fontsize = size.anno
      ),
      annotation_name_side = "left"
    ),
    left_annotation = ComplexHeatmap::rowAnnotation(
      "Cluster" = h.row.anno3
      ,
      col = list(
        "Cluster" = setNames(
          as.vector(
            col1[1:length(
              unique(h.row.anno3)
            )]
          ),
          c(
            unique(h.row.anno3)
          )
        )
      )
      ,
      show_annotation_name = T,
      annotation_name_gp = gpar(
        fontsize = 10
      )
    ),
    show_column_names = T,
    show_row_names = F,
    heatmap_width = unit(
      hm.w,"cm"
    ),
    heatmap_height = unit(
      hm.h,"cm"
    ),
    column_title = title1,
    column_names_rot = 90,
    column_names_gp = gpar(
      fontsize = size.lab
    ),
    cluster_columns = T,
    cluster_rows = T
  )
  
  
  return(
    list(
      "input" = d3,
      "plot" = h.out
    )
  )
  
}








#---- DEG Dot Plots ----

# # load DGEA results
# 
# list.dgea.result <- readRDS("Analysis/RDS/lsae.analysis.dgea.result.formatted.secretory.rds")
# 
# ## Top 10 per cell type
# 
# list.dgea.top10 <- dplyr::select(
#   dplyr::slice_max(
#     dplyr::group_by(
#       list.dgea.result,
#       dplyr::across(
#         dplyr::all_of(
#           c(
#             "CellType"
#           )
#         )
#       )
#     ),
#     order_by = -.data[["H.pval"]],
#     n = 10
#   ),
#   c(
#     "CellType",
#     "GENE",
#     "H.pval"
#   )
# )
# 
# list.dgea.top10 <- unique(list.dgea.top10[["GENE"]])
# 
# 
# ## Extract variables for dot plot
# 
# d1 <- cbind(FetchData(list.analysis.subset,
#                       vars = c("Airway",
#                                "Group2",
#                                list.dgea.top10)))
# 
# ## Count/ratio table for creating dot plots
# 
# d1.prc <- dplyr::bind_rows(
#   setNames(
#     lapply(
#       list.dgea.top10,
#       function(x) 
#         {
#         # Determine average expression of each gene per cell type
#         d.avg <- setNames(
#           aggregate(
#             d1[[x]],
#             by = list(
#               d1[,c("Group2")],
#               d1[,c("Airway")]
#               ),
#             function(y) 
#               mean(y)
#             ),
#           c(
#             "Group2","Airway",
#             "avg.exp"
#             )
#           )
#         d.avg[["avg.exp"]] <- round(
#           d.avg[["avg.exp"]],
#           digits = 2
#           )
#         
#         # Determine percent of cells in each group that express selected gene
#         d.prc <- dplyr::count(
#           d1,.data[["Group2"]],
#           .data[["Airway"]],
#           .data[[x]] > 0
#           )
#         d.prc <- setNames(
#           dplyr::filter(
#             d.prc,d.prc[3] == T
#             ),
#           c(
#             "Group2","Airway",
#             "pres","n"
#             )
#           )
#         d.cnt <- setNames(
#           dplyr::count(
#             d1,.data[["Group2"]],
#             .data[["Airway"]]
#             ),
#           c(
#             "Group2","Airway",
#             "n"
#             )
#           )
#         
#         # Combine output and return dataframe with ratio column
#         d.comb <- dplyr::left_join(
#           d.cnt,
#           d.prc,
#           by = c(
#             "Group2","Airway"
#             )
#           )
#         d.comb[is.na(d.comb)] <- 0
#         d.comb <- dplyr::mutate(
#           d.comb,
#           "perc.exp" = round(
#             d.comb[["n.y"]]/
#               d.comb[["n.x"]],
#             digits = 2
#             )
#           )
#         
#         # Combine outputs from average expression and percent expressed dfs
#         d.comb.out <- dplyr::left_join(
#           d.avg,
#           d.comb[,
#                  c(
#                    "Group2","Airway",
#                    "perc.exp"
#                    )],
#           by = c(
#             "Group2",
#             "Airway"
#             )
#           )
#         
#         
#         return(d.comb.out)
#         }
#       ),
#     c(
#       list.dgea.top10
#       )
#     ),
#   .id = "GENE"
#   )
# 
# ## Add row name labels and convert GENE column to factor
# 
# d1.prc <- data.frame(
#   d1.prc,
#   "labs" = factor(
#     paste(
#       d1.prc[["Group2"]],
#       d1.prc[["Airway"]],sep = " "),
#     levels = gtools::mixedsort(
#       unique(
#         paste(
#           d1.prc[["Group2"]],
#           d1.prc[["Airway"]],
#           sep = " "
#           )
#         )
#       )
#     )
#   )
# 
# d1.prc[["GENE"]] <- factor(
#   d1.prc[["GENE"]],
#   levels = unique(
#     d1.prc[["GENE"]]
#     )
#   )
# 
# 
# ## Plot
# 
# fun.dp.gene <- function(df) {
#   
#   p.dot <- ggplot(
#     df,
#     aes(
#       x = .data[["GENE"]],
#       y = .data[["labs"]],
#       fill = .data[["avg.exp"]],
#       size = .data[["perc.exp"]]
#       )
#     ) +
#     
#     geom_point(
#       shape = 21
#       ) +
#     
#     scale_fill_gradientn(
#       colors = col2a
#       ) +
#     
#     scale_size_area(max_size = 10) +
#     
#     thm.mult +
#     
#     labs(
#       fill = "Average Expression",
#       size = "Percent Expressed",
#       y = ""
#       ) +
#     
#     theme(
#       plot.margin = unit(
#         c(.2,.2,
#           .2,.2),
#         "cm"
#         )
#       )
#   
#   return(p.dot)
#   
# }
# 
# 
# ggsave("Analysis/dot.secretory.airway.topDEG.png",
#        fun.dp.gene(
#          d1.prc
#          ),
#        width = 24,
#        height = 8,
#        dpi = 700
#        )





#---- Dot plot comparing average expression between top10 DEGs for selected cell types ----

fun.dp.deg.top10 <- function(
    so,
    list.dge,
    ct,
    str.comp,
    list.var
    ) {
  
  # Load Seurat and change default assay to RNA
  d <- so
  DefaultAssay(so) <- "RNA"
  
  # Return top-10 DEGs per cell type
  ## remove duplicates from dgea result (requires dgea results df from previous step)
  list.top10 <- list.dge
  list.top10 <- list.top10[!duplicated(
    list.top10
    ),]
  
  ## select top-10 genes per cell type and each comparison
  list.top10 <- dplyr::select(
    dplyr::slice_max(
      dplyr::group_by(
        list.top10,
        dplyr::across(
          dplyr::all_of(
            c(
              "CellType",
              "Comparison"
            )
          )
        )
      ),
      order_by = -.data[["H.pval"]],
      n = 10
    ),
    c(
      "CellType",
      "Comparison",
      "GENE",
      "H.pval"
    )
  )
  
  ## filter list for chosen cell type and comparison
  list.top10 <- list.top10[grepl(
    ct,
    list.top10[["CellType"]]
    ) &
      grepl(
        str.comp,
        list.top10[["Comparison"]]
        ),]
  
  ## return list of unique genes
  list.top10 <- unique(
    list.top10[["GENE"]]
    )
  
  ## select genes from Seurat object
  d1 <- cbind(
    FetchData(
      d,
      vars = c(
        "CellType",
        c(
          list.var
          ),
        list.top10
      )
    )
  )
  
  ## Subset based on cell type
  d1 <- d1[grepl(ct,
                 d1[["CellType"]]
                 ),]
  
  d1[["CellType"]] <- factor(
    as.character(
      d1[["CellType"]]
      ),
    levels = gtools::mixedsort(
      unique(
        as.character(
          d1[["CellType"]]
          )
        )
      )
    )
  
  ## Count/ratio table for creating dot plots
  d1.prc <- dplyr::bind_rows(
      setNames(
        lapply(
          list.top10,
          function(x) 
          {
            # Determine average expression of each gene per cell type and comparison
            ## for 2 variables:
            if(length(list.var) == 2) {
              ### average expression
              d.avg <- setNames(
                aggregate(
                  d1[[x]],
                  by = list(
                    d1[,c("CellType")],
                    d1[,c(list.var[[1]])],
                    d1[,c(list.var[[2]])]
                  ),
                  function(y) 
                    mean(y)
                ),
                c(
                  "CellType",c(list.var),
                  "avg.exp"
                )
              )
              d.avg[["avg.exp"]] <- round(
                d.avg[["avg.exp"]],
                digits = 2
              )
              
              ### percent expressed
              d.prc <- dplyr::count(
                d1,.data[["CellType"]],
                .data[[list.var[[1]]]],
                .data[[list.var[[2]]]],
                .data[[x]] > 0
              )
              d.prc <- setNames(
                dplyr::filter(
                  d.prc,d.prc[4] == T
                ),
                c(
                  "CellType",c(list.var),
                  "pres","n"
                )
              )
              d.cnt <- setNames(
                dplyr::count(
                  d1,.data[["CellType"]],
                  .data[[list.var[[1]]]],
                  .data[[list.var[[2]]]]
                ),
                c(
                  "CellType",c(list.var),
                  "n"
                )
              )
              d.comb <- dplyr::left_join(
                d.cnt,
                d.prc,
                by = c(
                  "CellType",c(list.var)
                )
              )
              d.comb[is.na(d.comb)] <- 0
              d.comb <- dplyr::mutate(
                d.comb,
                "perc.exp" = round(
                  d.comb[["n.y"]]/
                    d.comb[["n.x"]],
                  digits = 2
                )
              )
              
              ### combined
              d.comb.out <- dplyr::left_join(
                d.avg,
                d.comb[,
                       c(
                         "CellType",c(list.var),
                         "perc.exp"
                       )],
                by = c(
                  "CellType",
                  c(list.var)
                )
              )
              
              
            }
            
            return(d.comb.out)
            
          }
        ),
        c(
          list.top10
        )
      ),
    .id = "GENE"
    )
  
  ## Add row name labels and convert GENE column to factor
  if(length(list.var) == 2) {
    
    d1.prc <- data.frame(
      d1.prc,
      "labs" = factor(
        paste(
          d1.prc[["CellType"]],
          d1.prc[[list.var[[1]]]],
          d1.prc[[list.var[[2]]]],
          sep = " "),
        levels = gtools::mixedsort(
          unique(
            paste(
              d1.prc[["CellType"]],
              d1.prc[[list.var[[1]]]],
              d1.prc[[list.var[[2]]]],
              sep = " "
            )
          )
        )
      )
    )
    
    d1.prc[["GENE"]] <- factor(
      d1.prc[["GENE"]],
      levels = unique(
        d1.prc[["GENE"]]
      )
    ) 
    
    }
  
  ## Plot
  p.dot <- ggplot(
      d1.prc,
      aes(
        x = .data[["GENE"]],
        y = .data[["labs"]],
        fill = .data[["avg.exp"]],
        size = .data[["perc.exp"]]
        )
      ) +
      geom_point(
        shape = 21
        ) +
      scale_fill_gradientn(
        colors = col2a
        ) +
      scale_size_area(max_size = 10) +
      thm.mult +
      labs(
        fill = "Average Expression",
        size = "Percent Expressed",
        y = ""
        ) +
      theme(
        plot.margin = unit(
          c(.2,.2,
            .2,.2),
          "cm"
          )
        )
  
  return(
    list(
      "Input" = d1.prc,
      "Plot" = p.dot
      )
    )
  
  }














fun.dp.deg.list <- function(
    so,
    list.dge,
    ct.var,
    ct,
    list.var
) {
  
  # Load Seurat and change default assay to RNA
  d <- so
  DefaultAssay(d) <- "RNA"
  
  # Return selected DEGs per cell type
  list.g <- list.dge
  
  ## select genes from Seurat object
  d1 <- cbind(
    FetchData(
      d,
      vars = c(
        ct.var,
        list.var,
        list.g
      )
    )
  )
  
  ## Subset based on cell type
  d1 <- d1[grepl(ct,
                 d1[[ct.var]]
  ),]
  unique(d1$CellType)
  
  
  d1[[ct.var]] <- factor(
    as.character(
      d1[[ct.var]]
    ),
    levels = gtools::mixedsort(
      unique(
        as.character(
          d1[[ct.var]]
        )
      )
    )
  )
  levels(d1$CellType)
  
  ## Count/ratio table for creating dot plots
  d1.prc <- dplyr::bind_rows(
    setNames(
      lapply(
        list.g,
        function(x) 
        {
          # Determine average expression of each gene per cell type and comparison
          ## for 2 variables:
          if(length(list.var) == 2) {
            ### average expression
            d.avg <- setNames(
              aggregate(
                d1[[x]],
                by = list(
                  d1[,c(ct.var)],
                  d1[,c(list.var[[1]])],
                  d1[,c(list.var[[2]])]
                ),
                function(y) 
                  mean(y)
              ),
              c(
                ct.var,c(list.var),
                "avg.exp"
              )
            )
            d.avg[["avg.exp"]] <- round(
              d.avg[["avg.exp"]],
              digits = 2
            )
            
            ### percent expressed
            d.prc <- dplyr::count(
              d1,.data[[ct.var]],
              .data[[list.var[[1]]]],
              .data[[list.var[[2]]]],
              .data[[x]] > 0
            )
            d.prc <- setNames(
              dplyr::filter(
                d.prc,d.prc[4] == T
              ),
              c(
                ct.var,c(list.var),
                "pres","n"
              )
            )
            d.cnt <- setNames(
              dplyr::count(
                d1,.data[[ct.var]],
                .data[[list.var[[1]]]],
                .data[[list.var[[2]]]]
              ),
              c(
                ct.var,c(list.var),
                "n"
              )
            )
            d.comb <- dplyr::left_join(
              d.cnt,
              d.prc,
              by = c(
                ct.var,c(list.var)
              )
            )
            d.comb[is.na(d.comb)] <- 0
            d.comb <- dplyr::mutate(
              d.comb,
              "perc.exp" = round(
                d.comb[["n.y"]]/
                  d.comb[["n.x"]],
                digits = 2
              )
            )
            
            ### combined
            d.comb.out <- dplyr::left_join(
              d.avg,
              d.comb[,
                     c(
                       ct.var,c(list.var),
                       "perc.exp"
                     )],
              by = c(
                ct.var,
                c(list.var)
              )
            )
            
            
          }
          
          return(d.comb.out)
          
        }
      ),
      c(
        list.g
      )
    ),
    .id = "GENE"
  )
  
  ## Add row name labels and convert GENE column to factor
  if(length(c(
    "Airway","Knockout"
  )) == 2) {
    
    d1.prc <- data.frame(
      d1.prc,
      "labs" = factor(
        paste(
          d1.prc[[ct.var]],
          d1.prc[[list.var[[1]]]],
          d1.prc[[list.var[[2]]]],
          sep = " "),
        levels = gtools::mixedsort(
          unique(
            paste(
              d1.prc[[ct.var]],
              d1.prc[[list.var[[1]]]],
              d1.prc[[list.var[[2]]]],
              sep = " "
            )
          )
        )
      )
    )
    
    d1.prc[["GENE"]] <- factor(
      d1.prc[["GENE"]],
      levels = unique(
        d1.prc[["GENE"]]
      )
    ) 
    
  }
  
  ## Plot
  p.dot <- ggplot(
    d1.prc,
    aes(
      x = .data[["GENE"]],
      y = .data[["labs"]],
      fill = .data[["avg.exp"]],
      size = .data[["perc.exp"]]
    )
  ) +
    geom_point(
      shape = 21
    ) +
    scale_fill_gradientn(
      colors = col2a
    ) +
    scale_size_area(max_size = 10) +
    thm.mult +
    labs(
      fill = "Average Expression",
      size = "Percent Expressed",
      y = ""
    ) +
    theme(
      plot.margin = unit(
        c(.2,.2,
          .2,.2),
        "cm"
      )
    )
  
  return(
    list(
      "Input" = d1.prc,
      "Plot" = p.dot
    )
  )
  
}














